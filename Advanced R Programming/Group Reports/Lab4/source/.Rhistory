comment = "#>"
)
library(png)
readPNG('plot1.png')
linreg_mod$resid()
linreg_mod$pred()
linreg_mod$coef()
linreg_mod$summary()
readPNG('plot1.png')
png(plot1.png)
png("plot1.png")
install.packages("png")
library(png)
png("plot1.png")
library(png)
png("plot1.png")
png("plot1.png")
setwd(dir = 'vignettes/')
rmarkdown::render("linear-vignette.Rmd", params = list(img = "plot1.png"))
rmarkdown::render("linreg-vignette.Rmd", params = list(img = "plot1.png"))
#' @title Linear Regression
#' @description You can have Reference Class containing some calculations by giving formula and data.
#' @field formula Formula
#' @field data A data frame
#' @examples
#' data(iris)
#' linreg$new(Petal.Length~Sepal.Width+Sepal.Length, data=iris)$print()
#' linreg$new(Petal.Length~Sepal.Width+Sepal.Length, data=iris)$pred()
#' linreg$new(Petal.Length~Sepal.Width+Sepal.Length, data=iris)$summary()
#' linreg$new(Petal.Length~Sepal.Width+Sepal.Length, data=iris)$resid()
#' linreg$new(Petal.Length~Sepal.Width+Sepal.Length, data=iris)$coef()
#' linreg$new(Petal.Length~Sepal.Width+Sepal.Length, data=iris)$plot()
#' @export linreg
#' @exportClass linreg
linreg <- setRefClass("linreg",
fields = list(formula = "formula", data = "data.frame",Coefficients = "numeric", Fits = "numeric",
Residuals = "numeric", df = "numeric",
rvariance = "matrix",
Var_residuals="numeric",tBetas="numeric",DataName="character",Std_betas="numeric",Pvalues="numeric"),
methods = list(
initialize = function(formula = formula, data = data){
formula<<-formula
data<<-data
x<-model.matrix(formula,data)
y<-all.vars(formula)[1]
y<-as.matrix(data[,names(data)==y])
b_hat<-solve(t(x)%*%x)%*%t(x)%*%y
y_fits<-x%*%b_hat
e<-y-y_fits
df1<-length(y)-ncol(x)
var_e<-(t(e)%*%e)/df1
var_b_hat<-as.numeric(var_e)*diag(solve((t(x)%*%x)))
std_b_hat<-sqrt(var_b_hat)
t_b_hat<-as.numeric(b_hat)/std_b_hat
p_b_hat<-(1-(pt(abs(t_b_hat),df = df1)))*2
b_hat_numeric<-as.numeric(b_hat)
names(b_hat_numeric)<-rownames(b_hat)
input_var<-as.character(match.call(expand.dots = FALSE))
Coefficients<<-b_hat_numeric
Fits<<-as.numeric(y_fits)
Residuals<<-as.numeric(e)
df<<-df1
Var_residuals<<-as.numeric(var_e)
Std_betas<<-std_b_hat
tBetas<<-t_b_hat
Pvalues<<-p_b_hat
DataName<<- deparse(substitute(data))
},
print = function(){
"Function Prints regression coefficients by using formula and data in initialization."
cat("Call:",sep="\n")
cat(paste("linreg(","formula = ",formula[2]," ",formula[1]," ",formula[3],", ","data = ",DataName,")",sep=""), sep="\n")
cat(sep="\n")
cat("Coefficients:")
cat(sep="\n")
beta<-Coefficients
namn<-names(beta)
names(beta)<-NULL
beta<-round(beta,4)
for(i in 2:length(beta)){
beta[i]<-format(beta[i], width=max(nchar(beta[i]),nchar(namn[i])),justify = "right")
}
beta[1]<-format(beta[1], width=max(nchar(beta[1]),nchar(namn[1]),nchar("Coefficients")),justify = "right")
namn[1]<-format(namn[1], width=max(nchar(beta[1]),nchar(namn[1]),nchar("Coefficients")),justify = "right")
beta[1]<-paste(beta[1],"  ",sep="")
namn[1]<-paste(namn[1],"  ",sep="")
beta[2]<-paste(beta[2]," ",sep="")
namn[2]<-paste(namn[2]," ",sep="")
cat(" ")
cat(namn)
cat(" ")
cat(sep="\n")
cat(beta)
},
plot = function(){
"This function plots two graphs, such as Fitted values vs Residuals and Scale Location by using given formula and data in initialization."
require(ggplot2)
linkoping_theme <-
theme(
plot.margin = unit(c(1.2,1.2,1.2,1.2), "cm"),
panel.background = element_rect(fill="#ccf0fa"),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.line = element_line(color= "#58585b", size=1),
axis.text.x = element_text(color="#0C0798", size="11"),
axis.text.y = element_text(color="#0C0798", size="11"),
axis.title.x = element_text(color="Black", size="12", face="bold.italic"),
axis.title.y = element_text(color="Black", size="12", face="bold.italic"),
axis.ticks.y = element_blank(),
axis.ticks.x = element_line(color = "#9D9ADC", size = 0.3),
plot.title = element_text(color="blue2", face="bold", size="14"),
legend.position="bottom", legend.title = element_blank(),
legend.text = element_text(color="Black", size="12")
)
dataint <- data.frame(residual = Residuals, fitos = Fits)
a <- ggplot(data = dataint, aes(x = fitos, y = residual) ) +
geom_point() + labs(x = "Fitted values", y = "Residuals") +
geom_smooth(method="loess", se = FALSE, color = "#0CC7D3") +
geom_hline(yintercept = 0) + theme_bw() + ggtitle("Residuals vs Fitted") +
linkoping_theme
#annotation_custom(g, xmin=2.5, xmax=4.5, ymin=-Inf, ymax=Inf)
#theme(plot.title = element_text(hjust = 0.5),panel.background = element_rect(fill="#F70707")) +
#  labs(title="Linkoping University" ) +
#  theme(plot.margin=margin(15,20,15,5),
#      plot.caption=element_text(colour="blue", hjust=0.5, size=14)) +
dataint2 <- data.frame(residual = sqrt(abs(Residuals)), fitos = Fits)
b <- ggplot(data = dataint2, aes(x = fitos, y = residual) ) +
geom_point() + labs(x = "Fitted values", y = expression(sqrt(abs("Standardized residuals")))) +
geom_smooth(method="loess", se = FALSE, color = "#0CC7D3") +
geom_hline(yintercept = 0) + theme_bw() + ggtitle("Scale Location") +
linkoping_theme
#   annotation_custom(g, xmin=2.5, xmax=4.5, ymin=-Inf, ymax=Inf) +
#   labs(caption="Linkoping University") +
#   theme(plot.margin=margin(15,20,15,5),
#   plot.caption=element_text(colour="blue", hjust=0.5, size=14)) +
return(list(ResidualsVsFitted = a, ScaleLocation = b))
},
resid = function(){
"Residual function returns residuals value."
return(
Residuals
)
},
pred = function(){
"This function returns fitted value."
return(
Fits
)
},
coef = function(){
"This function returns regression coefficients"
return(
Coefficients
)
},
summary = function(){
"This Function Prints the coefficients with their standard error, t-value and p-value."
# (Intercept) -2.55 0.55 -4.44 ****
# Sepal.Width -1.32 0.15 -10.95  ****
# Sepal.Length 1.72 0.05 27.55  ****
# Residual standard error: 0.63 on 147 degrees of freedom
beta<-Coefficients
namn<-names(beta)
names(beta)<-NULL
beta<-round(beta,4)
for(i in 1:length(beta)){
beta[i]<-format(beta[i], width=max(nchar(beta[i]),nchar(namn[i])),justify = c("right"))
namn[i]<-format(namn[i], width=max(nchar(beta[i]),nchar(namn[i])),justify = c("right"))
}
Variable<-as.character(names(Coefficients))
Estimate<-round(Coefficients,3)
Std_Error<-round(Std_betas,3)
t_value<-round(tBetas,3)
Pr_t<-round(Pvalues,5)
svar<-data.frame(Variable,Estimate,Std_Error,t_value,Pr_t)
row.names(svar)<-NULL
svar$Variable<-as.character(svar$Variable)
cat("Call:",sep="\n")
cat(paste("linreg(","formula = ",formula[2]," ",formula[1]," ",formula[3],", ","data = ",DataName,")",sep=""), sep="\n")
cat(sep="\n")
cat("Coefficients:",sep="\n")
cat()
for(i in 1:nrow(svar)){
cat(paste(svar[i,],collapse = " "),sep="",collapse=" ***\n")
}
cat("",sep="\n")
cat(paste("Residual standard error: ",round(sqrt(Var_residuals),5) ," on " ,df, " degrees of freedom",sep=""))
}
))
linreg_mod <- linreg$new(Petal.Length~Species, data=iris)
# linreg_mod$print()
# linreg_mod$plot()
# linreg_mod$resid()
# linreg_mod$pred()
# linreg_mod$coef()
# linreg_mod$summary()
source('~/.active-rstudio-document', echo=TRUE)
#' @title Linear Regression
#' @description You can have Reference Class containing some calculations by giving formula and data.
#' @field formula Formula
#' @field data A data frame
#' @examples
#' data(iris)
#' linreg$new(Petal.Length~Sepal.Width+Sepal.Length, data=iris)$print()
#' linreg$new(Petal.Length~Sepal.Width+Sepal.Length, data=iris)$pred()
#' linreg$new(Petal.Length~Sepal.Width+Sepal.Length, data=iris)$summary()
#' linreg$new(Petal.Length~Sepal.Width+Sepal.Length, data=iris)$resid()
#' linreg$new(Petal.Length~Sepal.Width+Sepal.Length, data=iris)$coef()
#' linreg$new(Petal.Length~Sepal.Width+Sepal.Length, data=iris)$plot()
#' @export linreg
#' @exportClass linreg
linreg <- setRefClass("linreg",
fields = list(formula = "formula", data = "data.frame",Coefficients = "numeric", Fits = "numeric",
Residuals = "numeric", df = "numeric",
rvariance = "matrix",
Var_residuals="numeric",tBetas="numeric",DataName="character",Std_betas="numeric",Pvalues="numeric"),
methods = list(
initialize = function(formula = formula, data = data){
formula<<-formula
data<<-data
x<-model.matrix(formula,data)
y<-all.vars(formula)[1]
y<-as.matrix(data[,names(data)==y])
b_hat<-solve(t(x)%*%x)%*%t(x)%*%y
y_fits<-x%*%b_hat
e<-y-y_fits
df1<-length(y)-ncol(x)
var_e<-(t(e)%*%e)/df1
var_b_hat<-as.numeric(var_e)*diag(solve((t(x)%*%x)))
std_b_hat<-sqrt(var_b_hat)
t_b_hat<-as.numeric(b_hat)/std_b_hat
p_b_hat<-(1-(pt(abs(t_b_hat),df = df1)))*2
b_hat_numeric<-as.numeric(b_hat)
names(b_hat_numeric)<-rownames(b_hat)
input_var<-as.character(match.call(expand.dots = FALSE))
Coefficients<<-b_hat_numeric
Fits<<-as.numeric(y_fits)
Residuals<<-as.numeric(e)
df<<-df1
Var_residuals<<-as.numeric(var_e)
Std_betas<<-std_b_hat
tBetas<<-t_b_hat
Pvalues<<-p_b_hat
DataName<<- deparse(substitute(data))
},
print = function(){
"Function Prints regression coefficients by using formula and data in initialization."
cat("Call:",sep="\n")
cat(paste("linreg(","formula = ",formula[2]," ",formula[1]," ",formula[3],", ","data = ",DataName,")",sep=""), sep="\n")
cat(sep="\n")
cat("Coefficients:")
cat(sep="\n")
beta<-Coefficients
namn<-names(beta)
names(beta)<-NULL
beta<-round(beta,4)
for(i in 2:length(beta)){
beta[i]<-format(beta[i], width=max(nchar(beta[i]),nchar(namn[i])),justify = "right")
}
beta[1]<-format(beta[1], width=max(nchar(beta[1]),nchar(namn[1]),nchar("Coefficients")),justify = "right")
namn[1]<-format(namn[1], width=max(nchar(beta[1]),nchar(namn[1]),nchar("Coefficients")),justify = "right")
beta[1]<-paste(beta[1],"  ",sep="")
namn[1]<-paste(namn[1],"  ",sep="")
beta[2]<-paste(beta[2]," ",sep="")
namn[2]<-paste(namn[2]," ",sep="")
cat(" ")
cat(namn)
cat(" ")
cat(sep="\n")
cat(beta)
},
plot = function(){
"This function plots two graphs, such as Fitted values vs Residuals and Scale Location by using given formula and data in initialization."
require(ggplot2)
linkoping_theme <-
theme(
plot.margin = unit(c(1.2,1.2,1.2,1.2), "cm"),
panel.background = element_rect(fill="#ccf0fa"),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.line = element_line(color= "#58585b", size=1),
axis.text.x = element_text(color="#0C0798", size="11"),
axis.text.y = element_text(color="#0C0798", size="11"),
axis.title.x = element_text(color="Black", size="12", face="bold.italic"),
axis.title.y = element_text(color="Black", size="12", face="bold.italic"),
axis.ticks.y = element_blank(),
axis.ticks.x = element_line(color = "#9D9ADC", size = 0.3),
plot.title = element_text(color="blue2", face="bold", size="14"),
legend.position="bottom", legend.title = element_blank(),
legend.text = element_text(color="Black", size="12")
)
dataint <- data.frame(residual = Residuals, fitos = Fits)
a <- ggplot(data = dataint, aes(x = fitos, y = residual) ) +
geom_point() + labs(x = "Fitted values", y = "Residuals") +
geom_smooth(method="loess", se = FALSE, color = "#0CC7D3") +
geom_hline(yintercept = 0) + theme_bw() + ggtitle("Residuals vs Fitted") +
linkoping_theme
#annotation_custom(g, xmin=2.5, xmax=4.5, ymin=-Inf, ymax=Inf)
#theme(plot.title = element_text(hjust = 0.5),panel.background = element_rect(fill="#F70707")) +
#  labs(title="Linkoping University" ) +
#  theme(plot.margin=margin(15,20,15,5),
#      plot.caption=element_text(colour="blue", hjust=0.5, size=14)) +
dataint2 <- data.frame(residual = sqrt(abs(Residuals)), fitos = Fits)
b <- ggplot(data = dataint2, aes(x = fitos, y = residual) ) +
geom_point() + labs(x = "Fitted values", y = expression(sqrt(abs("Standardized residuals")))) +
geom_smooth(method="loess", se = FALSE, color = "#0CC7D3") +
geom_hline(yintercept = 0) + theme_bw() + ggtitle("Scale Location") +
linkoping_theme
#   annotation_custom(g, xmin=2.5, xmax=4.5, ymin=-Inf, ymax=Inf) +
#   labs(caption="Linkoping University") +
#   theme(plot.margin=margin(15,20,15,5),
#   plot.caption=element_text(colour="blue", hjust=0.5, size=14)) +
return(list(ResidualsVsFitted = a, ScaleLocation = b))
},
resid = function(){
"Residual function returns residuals value."
return(
Residuals
)
},
pred = function(){
"This function returns fitted value."
return(
Fits
)
},
coef = function(){
"This function returns regression coefficients"
return(
Coefficients
)
},
summary = function(){
"This Function Prints the coefficients with their standard error, t-value and p-value."
# (Intercept) -2.55 0.55 -4.44 ****
# Sepal.Width -1.32 0.15 -10.95  ****
# Sepal.Length 1.72 0.05 27.55  ****
# Residual standard error: 0.63 on 147 degrees of freedom
beta<-Coefficients
namn<-names(beta)
names(beta)<-NULL
beta<-round(beta,4)
for(i in 1:length(beta)){
beta[i]<-format(beta[i], width=max(nchar(beta[i]),nchar(namn[i])),justify = c("right"))
namn[i]<-format(namn[i], width=max(nchar(beta[i]),nchar(namn[i])),justify = c("right"))
}
Variable<-as.character(names(Coefficients))
Estimate<-round(Coefficients,3)
Std_Error<-round(Std_betas,3)
t_value<-round(tBetas,3)
Pr_t<-round(Pvalues,5)
svar<-data.frame(Variable,Estimate,Std_Error,t_value,Pr_t)
row.names(svar)<-NULL
svar$Variable<-as.character(svar$Variable)
cat("Call:",sep="\n")
cat(paste("linreg(","formula = ",formula[2]," ",formula[1]," ",formula[3],", ","data = ",DataName,")",sep=""), sep="\n")
cat(sep="\n")
cat("Coefficients:",sep="\n")
cat()
for(i in 1:nrow(svar)){
cat(paste(svar[i,],collapse = " "),sep="",collapse=" ***\n")
}
cat("",sep="\n")
cat(paste("Residual standard error: ",round(sqrt(Var_residuals),5) ," on " ,df, " degrees of freedom",sep=""))
}
))
linreg_mod <- linreg$new(Petal.Length~Species, data=iris)
# linreg_mod$print()
# linreg_mod$plot()
# linreg_mod$resid()
# linreg_mod$pred()
# linreg_mod$coef()
# linreg_mod$summary()
as<-linreg$new((Petal.Length ~ Species,data=iris)
data(iris)
as<-linreg$new((Petal.Length ~ Species,data="iris")
as<-linreg$new((Petal.Length ~ Species, data="iris")
as<-linreg$new(Petal.Length ~ Species,data=iris)
as$plot
as$plot()
#' Linear Regression
#'
#' @field X :matrix containing all the data.
#' @field Y :vector containing response variable.
#' @field reg_coe vector: Estimation of the regression coefficients.
#' @field fit_val vector: Estimation of the Y values.
#' @field resid_e vector:Estimation of the error variable.
#' @field n numeric :Number of data.
#' @field p numeric Number of variables.
#' @field df numeric:Degrees of freedom.
#' @field resid_var numeric:Estimates of the variance of the error variable.
#' @field var_beta matrix:Estimates the variability of the beta coefficients.
#' @field t_val vector:T-values for significance of coefficients.
#' @field formula:Linear regression formula .
#' @field data: Recieved data from user.
#' @field dname:Data name.
#' @export linreg
#' @exportClass linreg
#' @description The package creates a new class called "Linreg".It consists in an alternative implemantation of the linear regression algorithm.
linreg <-setRefClass("linreg",
fields = list(
formula="formula",
data = "data.frame",
dname = "vector",
X="matrix",
Y="vector",
reg_coe="vector",
fit_val="vector",
resid_e="vector",
n="numeric",
p="numeric",
df="numeric",
resid_var="numeric",
var_beta="matrix",
t_val="vector"
),
methods = list(
initialize = function(formula, data){
formula<<-formula
data<<-data
X<<-model.matrix(formula,data)  # X, matrix containing all the data
Y<<-as.matrix(data[all.vars(formula)[1]])  # Y, vector containing response variable
reg_coe<<-solve((t(X)%*%X))%*%t(X)%*%Y  # Estimation of the regression coefficients
names(reg_coe) <<- colnames(X)
fit_val<<-X%*%reg_coe  # Estimation of the Y values
resid_e<<-Y-fit_val  # Estimation of the error variable
n<<-NROW(X)   # Number of data
p<<-NCOL(X)   # Number of variables
df<<-n-p   # Degrees of freedom
resid_var<<-as.numeric((t(resid_e)%*%resid_e)/df)  # Estimates of the variance of the error variable
var_beta<<-resid_var*solve(t(X)%*%X)  # Estimates the variability of the beta coefficients
t_val<<-reg_coe/sqrt(diag(var_beta))   # T-values for significance of coefficients
dname <<- deparse(substitute(data))
}
,
print = function(){
cat("call:","\n")
right_formula = paste(all.vars(formula)[-1], collapse = " + ")
cat("linreg(formula = ", all.vars(formula)[1], " ~ ", right_formula,
", data = ", dname,")", "\n", sep ="")
#cat(all.vars(formula)[1], " ~ ", paste(all.vars(formula)[-1],sep="+"),"\n")
cat("coefficients:","\n")
cat(format(labels(reg_coe), width=25, justify = "right"), "\n")
cat(format(reg_coe, width=25, justify = "right"))
#cat(reg_coe, labels = T)
},
plot = function(){
require(ggplot2)
data_plot <- data.frame(fit_val, resid_e, stand_res = sqrt(abs(resid_e/sd(resid_e))))
p1 = suppressMessages(ggplot(data_plot, aes(x=fit_val, y=resid_e)) +
geom_point(shape = 1) +
geom_smooth(se = FALSE, color = "red") +
ggtitle("Residual vs Fitted") +
xlab(paste0("Fitted values\nlm( ", all.vars(formula)[1], " ~ ",
paste(all.vars(formula)[-1], sep = " + "), " )", sep = "")) +
ylab("Residuals") +
theme_light())
p2 = suppressMessages(ggplot(data_plot, aes(x=fit_val, y=stand_res)) +
geom_point(shape = 1) +
geom_smooth(se = FALSE, color = "red") +
ggtitle("Scale - Location") +
xlab(paste0("Fitted values\nlm( ", all.vars(formula)[1], " ~ ",
paste(all.vars(formula)[-1], sep = " + "), " )", sep = "")) +
ylab(expression(sqrt("|Standardize residuals|"))) +
theme_light())
suppressMessages(list(p1,p2))
},
resid = function(){
return(resid_e)
},
pred = function(){
return(fit_val)
},
coef = function(){
return(reg_coe)
},
summary = function(){
l <- list()
m = matrix(NA,p,4)
m[,1] = reg_coe
m[,2] = sqrt(diag(var_beta))
m[,3] = t_val
m[,4] = (1-pt(t_val, df))*2
colnames(m) <- c("Estimate", "Std. Error", "t value", "Pr(>|t|)")
rownames(m) <- colnames(X)
l$matrix <- m
l$variance <- resid_var
cat(format("",width = 12))
cat(format(colnames(m), width=20, justify="right"),'\n')
for(i in 1:nrow(m)){
cat(format(rownames(m)[i], width = 20, justify = "left"))
if(m[i,4]<0.001)
cat(format(round(m[i,], digits = 5), width=20, justify="right", scientific = F), format("***", width=20, justify="left"), '\n')
else if(m[i,4]<0.01)
cat(format(round(m[i,], digits = 5), width=20, justify="right", scientific = F),format("**", width=20, justify="left"),'\n')
else if(m[i,4]<0.05)
cat(format(round(m[i,], digits = 5), width=20, justify="right", scientific = F),format("*", width=20, justify="left"),'\n')
else if(m[i,4]<0.1)
cat(format(round(m[i,], digits = 5), width=20, justify="right", scientific = F),format(".", width=20, justify="left"),'\n')
else
cat(format(round(m[i,], digits = 5), width=20, justify="right", scientific = F),format(" ", width=20, justify="left"),'\n')
}
cat("Residual standard error:", round(sqrt(resid_var), 3), "on", df, "degrees of freedom")
}
))
linreg_a<-linreg$new(formula=Petal.Length~Species+Petal.Width,data=iris)
linreg_a$plot
linreg_a$plot()
