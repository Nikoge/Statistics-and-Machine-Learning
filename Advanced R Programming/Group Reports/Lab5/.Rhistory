'MAPBOX_TOKEN' =
'pk.eyJ1Ijoic3RldG84MjAiLCJhIjoiY2ptYm1hNGoxMDVzODNxcDh5YWYwdWIyeiJ9.vqmnBQELpRxT2klgrWJvuQ')
countries = list(
"Turkey",
"Italy",
"Greece",
"Sweden"
)
api <- MyShiny::Worldwide_Pollution$new(countries)
output$plot_1 = renderPlot({
facets = c(
"country",
"value_pm5"
)
plot_pm25_means(api$get_facets_all_responses(facets))
})
output$plot_2 = renderPlotly({
facet_vector<-c(
"country",
"filename",
"value_pm5",
"Category PM25",
"data_location_latitude",
"data_location_longitude")
df<-api$get_only_faced_data(api$responses[[input$radio]], facet_vector)
if(input$radio=="Italy") zoom <- 4.1
else if(input$radio=="Sweden") zoom <- 3
else zoom <- 5
p<-plot_mapbox(mode = "scattermapbox") %>%
add_markers(
data = df, y = ~data_location_latitude, x = ~data_location_longitude,
color=~as.factor(`Category PM25`), text = ~filename, hoverinfo = "text",
hovertext = paste('</br>Category: ', df$`Category PM25`, "</br>Region: ", df$filename,
"</br>Value: ", df$value_pm5),
marker=list(size=10), alpha = 0.5,
colors = rev(RColorBrewer::brewer.pal(length(unique(df$`Category PM25`)),"PiYG"))) %>%
layout(
plot_bgcolor = '#191A1A', paper_bgcolor = '#191A1A',
mapbox = list(style = 'dark',
scope = "europe",
zoom = zoom,
center = list(lat = mean(as.numeric(df$data_location_latitude)),
lon = mean(as.numeric(df$data_location_longitude)))),
legend = list(orientation = 'h',
font = list(size = 8)),
margin = list(l = 0, r = 0,
b = 0, t = 0,
pad = 0)
)
p
})
}
},
run=function(){
shinyApp(ui = server_components$ui, server = server_components$server)
},
plot_pm25_means=function(all_data){
mean_table = all_data %>%
group_by(country) %>%
summarise(mean=mean(value_pm5))
g = ggplot(mean_table, aes(x=country, y=mean)) +
geom_bar(position="dodge", stat="identity") +
labs(title = "Means of P5 in Countries", x="Countries", y="Mean") +
scale_y_continuous(breaks=seq(0,70,by=5))
return(g)
}
)
)
a<-My_shiny$new()
#'
#' @field server_components list. It contains ui and server for the Shiny application.
#' @description This class uses another class in order to have access in an API.
#' It is also create a Shiny application for air pollution.
#' @import shiny
#' @import dplyr
#' @import ggplot2
#' @import plotly
#' @export My_shiny
#' @exportClass My_shiny
My_shiny<-
setRefClass(
"My_shiny",
fields = list(
server_components="list"
),
methods=list(
initialize=function(){
server_components<<-list()
server_components$ui <<-
navbarPage("My Application",
tabPanel("Component 1",
plotOutput("plot_1")),
tabPanel("Component 2",
fluidPage(
titlePanel("Concentration of PM25"),
fluidRow(
column(2,
radioButtons(inputId = "radio",
label = "Select the country you wish to visualize:",
choices = c("Turkey", "Italy", "Greece", "Sweden"),
inline = FALSE,
width = NULL)
),
hr(),
column(10,
fluidRow(plotlyOutput("plot_2", height = "500px")))))))
server_components$server<<- function(input, output){
Sys.setenv(
'MAPBOX_TOKEN' =
'pk.eyJ1Ijoic3RldG84MjAiLCJhIjoiY2ptYm1hNGoxMDVzODNxcDh5YWYwdWIyeiJ9.vqmnBQELpRxT2klgrWJvuQ')
countries = list(
"Turkey",
"Italy",
"Greece",
"Sweden"
)
api <- MyShiny::Worldwide_Pollution$new(countries)
output$plot_1 = renderPlot({
facets = c(
"country",
"value_pm5"
)
plot_pm25_means(api$get_facets_all_responses(facets))
})
output$plot_2 = renderPlotly({
facet_vector<-c(
"country",
"filename",
"value_pm5",
"Category PM25",
"data_location_latitude",
"data_location_longitude")
df<-api$get_only_faced_data(api$responses[[input$radio]], facet_vector)
if(input$radio=="Italy") zoom <- 4.1
else if(input$radio=="Sweden") zoom <- 3
else zoom <- 5
p<-plot_mapbox(mode = "scattermapbox") %>%
add_markers(
data = df, y = ~data_location_latitude, x = ~data_location_longitude,
color=~as.factor(`Category PM25`), text = ~filename, hoverinfo = "text",
hovertext = paste('</br>Category: ', df$`Category PM25`, "</br>Region: ", df$filename,
"</br>Value: ", df$value_pm5),
marker=list(size=10), alpha = 0.5,
colors = rev(RColorBrewer::brewer.pal(length(unique(df$`Category PM25`)),"PiYG"))) %>%
layout(
plot_bgcolor = '#191A1A', paper_bgcolor = '#191A1A',
mapbox = list(style = 'dark',
scope = "europe",
zoom = zoom,
center = list(lat = mean(as.numeric(df$data_location_latitude)),
lon = mean(as.numeric(df$data_location_longitude)))),
legend = list(orientation = 'h',
font = list(size = 8)),
margin = list(l = 0, r = 0,
b = 0, t = 0,
pad = 0)
)
p
})
}
},
run=function(){
shinyApp(ui = server_components$ui, server = server_components$server)
},
plot_pm25_means=function(all_data){
mean_table = all_data %>%
group_by(country) %>%
summarise(mean=mean(value_pm5))
g = ggplot(mean_table, aes(x=country, y=mean)) +
geom_bar(position="dodge", stat="identity") +
labs(title = "Means of P5 in Countries", x="Countries", y="Mean") +
scale_y_continuous(breaks=seq(0,70,by=5))
return(g)
}
)
)
#' Title Worldwide_Pollution
#'
#' @field responses list. The list of responses comming from API
#' @field root_url character. The base url of the API
#' @field countries list. A list of the user's input
#' @description This class creates one object which can give access in an API.The user can choose between four countries(Greece,Italy,Sweden,Turkey),
#' and manipulate data for air pollution such as value pm5.
#' @import jsonlite
#' @export Worldwide_Pollution
#' @exportClass Worldwide_Pollution
Worldwide_Pollution =
setRefClass(
"Worldwide_Pollution",
fields = list(
responses = "list",
root_url = "character",
countries = "list"
),
methods = list(
initialize = function(country_list){
if(is.character(country_list)==TRUE)
stop("asdasd")
supported_countries = list(
"Turkey",
"Italy",
"Greece",
"Sweden"
)
if(any(!(country_list %in% supported_countries)))
stop("No correct input")
if(length(country_list)==0)
stop("country_list parameter cannot be empty!")
countries <<- country_list
root_url <<- "https://public.opendatasoft.com/api/records/1.0/search/?dataset=worldwide-pollution"
responses <<- get_all_country_responses()
},
# takes parameter:
# country: string
# facets: list that contains facets that you want
get_country_data = function(country, facets=c()){
response = fromJSON(get_req_url(get_req_part(facets,"facet"), get_req_query("refine.country", country), get_req_query("rows", "10000")))
return(response)
},
# returns observations of countries:
# Turkey,Greece,Italy,Sweden
# as a dataframe
get_all_country_responses = function(){
ress = list()
for (country in countries) {
cat(country, "request sent..." , sep = " ", "\n")
res = fromJSON(get_req_url(get_req_query("refine.country", country), get_req_query("rows", "10000")))
ress[[country]]=res
cat(country, "responded!" , sep = " ", "\n")
}
return(ress)
},
# returns &key=value
get_req_query = function(key,val){
return(paste(list("&",key,"=",gsub(" ", "%20", val)), collapse = ""))
},
# if you have a list for request parameters.
# This function will return repeatly get_req_query
# for facet_list and key=facet
# it returns &facet=facet_list[1]&facet=facet_list[2]
get_req_part = function(facet_list, key){
return(paste(lapply(facet_list, FUN=get_req_query, key=key), collapse=""))
},
# takes elements as parameter
# returns the whole url for request
get_req_url = function(...){
elements = list(...)
return(paste(c(root_url, elements), collapse=""))
},
# gets only one response from API and specific facets to get data that we want
# returns dataframe only for response
get_only_faced_data = function(response,facet_vector){
if(length(facet_vector)==0)
stop("facet_vector cannot be empty!!!")
return(response$records$fields[,facet_vector])
},
# gets a response_list contains responses from API and specific facets to get data that we want
# returns only one dataframe that merged all responses by row wise
get_facets_all_responses = function(facet_vector){
if(length(facet_vector)==0)
stop("facet_vector cannot be empty!!!")
if(!(is.vector(facet_vector) && is.character(facet_vector)))
stop("facet_vector should be character vector!!!")
d=NA
counter=1
for (res in responses) {
if(counter==1)
d=get_only_faced_data(res, facet_vector)
else
d=rbind(d, get_only_faced_data(res, facet_vector))
counter=counter+1
}
return(d)
}
)
)
a<-My_shiny$new()
library(plotly)
install.packages("plotly")
library(plotly)
#'
#' @field server_components list. It contains ui and server for the Shiny application.
#' @description This class uses another class in order to have access in an API.
#' It is also create a Shiny application for air pollution.
#' @import shiny
#' @import dplyr
#' @import ggplot2
#' @import plotly
#' @export My_shiny
#' @exportClass My_shiny
My_shiny<-
setRefClass(
"My_shiny",
fields = list(
server_components="list"
),
methods=list(
initialize=function(){
server_components<<-list()
server_components$ui <<-
navbarPage("My Application",
tabPanel("Component 1",
plotOutput("plot_1")),
tabPanel("Component 2",
fluidPage(
titlePanel("Concentration of PM25"),
fluidRow(
column(2,
radioButtons(inputId = "radio",
label = "Select the country you wish to visualize:",
choices = c("Turkey", "Italy", "Greece", "Sweden"),
inline = FALSE,
width = NULL)
),
hr(),
column(10,
fluidRow(plotlyOutput("plot_2", height = "500px")))))))
server_components$server<<- function(input, output){
Sys.setenv(
'MAPBOX_TOKEN' =
'pk.eyJ1Ijoic3RldG84MjAiLCJhIjoiY2ptYm1hNGoxMDVzODNxcDh5YWYwdWIyeiJ9.vqmnBQELpRxT2klgrWJvuQ')
countries = list(
"Turkey",
"Italy",
"Greece",
"Sweden"
)
api <- MyShiny::Worldwide_Pollution$new(countries)
output$plot_1 = renderPlot({
facets = c(
"country",
"value_pm5"
)
plot_pm25_means(api$get_facets_all_responses(facets))
})
output$plot_2 = renderPlotly({
facet_vector<-c(
"country",
"filename",
"value_pm5",
"Category PM25",
"data_location_latitude",
"data_location_longitude")
df<-api$get_only_faced_data(api$responses[[input$radio]], facet_vector)
if(input$radio=="Italy") zoom <- 4.1
else if(input$radio=="Sweden") zoom <- 3
else zoom <- 5
p<-plot_mapbox(mode = "scattermapbox") %>%
add_markers(
data = df, y = ~data_location_latitude, x = ~data_location_longitude,
color=~as.factor(`Category PM25`), text = ~filename, hoverinfo = "text",
hovertext = paste('</br>Category: ', df$`Category PM25`, "</br>Region: ", df$filename,
"</br>Value: ", df$value_pm5),
marker=list(size=10), alpha = 0.5,
colors = rev(RColorBrewer::brewer.pal(length(unique(df$`Category PM25`)),"PiYG"))) %>%
layout(
plot_bgcolor = '#191A1A', paper_bgcolor = '#191A1A',
mapbox = list(style = 'dark',
scope = "europe",
zoom = zoom,
center = list(lat = mean(as.numeric(df$data_location_latitude)),
lon = mean(as.numeric(df$data_location_longitude)))),
legend = list(orientation = 'h',
font = list(size = 8)),
margin = list(l = 0, r = 0,
b = 0, t = 0,
pad = 0)
)
p
})
}
},
run=function(){
shinyApp(ui = server_components$ui, server = server_components$server)
},
plot_pm25_means=function(all_data){
mean_table = all_data %>%
group_by(country) %>%
summarise(mean=mean(value_pm5))
g = ggplot(mean_table, aes(x=country, y=mean)) +
geom_bar(position="dodge", stat="identity") +
labs(title = "Means of P5 in Countries", x="Countries", y="Mean") +
scale_y_continuous(breaks=seq(0,70,by=5))
return(g)
}
)
)
a<-My_shiny$new()
a$run()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
worldwide<-worldwide_Pollution$new(list("Sweden"))
library(MyShiny)
worldwide<-worldwide_Pollution$new(list("Sweden"))
devtools::install_github("sburanga/Adv_Progr_5")
library(MyShiny)
worldwide<-worldwide_Pollution$new(list("Sweden"))
worldwide<-Worldwide_Pollution$new(list("Sweden"))
worldwide$get_only_faced_data(response = worldwide$responses$Sweden,facet_vector = "value_pm5")
worldwide$get_country_data("Sweden")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(MyShiny)
worldwide<-Worldwide_Pollution$new(list("Sweden"))
worldwide$get_only_faced_data(response = worldwide$responses$Sweden,facet_vector = "value_pm5")
worldwide$get_only_faced_data(response = worldwide$responses$Sweden,facet_vector = c("value_pm5","Category PM25"))
head(worldwide$get_only_faced_data(response = worldwide$responses$Sweden,facet_vector = c("value_pm5","Category PM25")))
My_sunShiny<-My_shiny$new()
worldwide$get_only_faced_data(response = worldwide$responses$Sweden,facet_vector = c("value_pm5"))
devtools::check()
devtools::install_github("sburanga/Adv_Progr_5")
library(MyShiny)
a<-My_shiny$new()
a$run()
devtools::install_github("sburanga/Adv_Progr_5")
devtools::install_github("sburanga/Adv_Progr_5")
lim(sin((x)))
sin(Inf)
library(Ryacas)
install.packages(Ryacas)
install.packages("Ryacas")
library(Ryacas)
Limit(f = sin(x),x = Inf)
x<-Sym("x")
Limit(f = sin(x),x = Inf)
pow<-function(input){
i<-0
a<-0
while (i<input) {
a<-a+input
i<-i+1
}
return(a)
}
pow(4)
pow(15)
pow(5)
1:4
a<-function(input){
var_a<-0
while (var_a<input) {
varb[var_a]<-var_a
var_a<-var_a+1
}
return(varb)
}
a(5)
a<-function(input){
var_a<-0
varb<-list()
while (var_a<input) {
varb[var_a]<-var_a
var_a<-var_a+1
}
return(varb)
}
a(5)
list(c(1,2,3,4))
c(1,2,3,4)
a<-c(1,2,3,4)
append(5,a)
maxi<-function(input){
i<-0
while (i<lenght(input)) {
van<-max(input[i],input[i+1])
i<-i+1
}
return(van)
}
a<-c(3,1,8,0,2)
maxi(a)
maxi<-function(input){
i<-0
while (i<length(input)) {
van<-max(input[i],input[i+1])
i<-i+1
}
return(van)
}
maxi(a)
maxi<-function(input){
i<-1
while (i<length(input)) {
van<-max(input[i],input[i+1])
i<-i+1
}
return(van)
}
maxi(a)
max(5,2)
maxi<-function(input){
i<-2
van<-input[1]
while (i<length(input)) {
van<-max(input[i],van)
i<-i+1
}
return(van)
}
maxi(a)
a<-c(3,1,8,10,2)
maxi(a)
maxi<-function(input){
if( input%%2==0) print(0)
else print(1)
}
maxi(5)
maxi(6)
